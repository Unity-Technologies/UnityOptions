<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{64149EC4-87B8-4E21-96BE-3691A72E9034}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Unity.Options.Tests</RootNamespace>
    <AssemblyName>Unity.Options.Tests</AssemblyName>
    <TargetFrameworkVersion>v4.6.1</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <!-- For some reason xbuild on OSX doesn't seem to fine SolutionDirectory, but it does have SolutionDir
         And although SolutionDir does seem to work for xbuild and msbuild, R# intellisense is not happy about it
         So to work around this, if SolutionDirectory is not defined, define it to SolutionDir-->
    <SolutionDirectory Condition=" '$(SolutionDirectory)' == '' ">$(SolutionDir)</SolutionDirectory>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>$(SolutionDirectory)/build/</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>$(SolutionDirectory)/build/</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="nunit.framework">
      <HintPath>../external/NUnit3/bin/net45/nunit.framework.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Core" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Fixtures.cs" />
    <Compile Include="OptionsTests.cs" />
    <Compile Include="ResponseFileTests.cs" />
    <Compile Include="TempFile.cs" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Unity.Options\Unity.Options.csproj">
      <Project>{783F0782-FA64-49FB-9B89-8B4A56003A70}</Project>
      <Name>Unity.Options</Name>
    </ProjectReference>
    <ProjectReference Include="..\UnityEngine.Options.Tests.AnotherReference\UnityEngine.Options.Tests.AnotherReference.csproj">
      <Project>{03B4007B-CB4E-483A-A359-07303C743591}</Project>
      <Name>UnityEngine.Options.Tests.AnotherReference</Name>
    </ProjectReference>
    <ProjectReference Include="..\UnityEngine.Options.Tests.ExternalReference\UnityEngine.Options.Tests.ExternalReference.csproj">
      <Project>{0033F670-8F51-4918-8B88-9C473AF1B899}</Project>
      <Name>UnityEngine.Options.Tests.ExternalReference</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <Service Include="{82A7F48D-3B50-4B1E-B82E-3ADA8210C358}" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>